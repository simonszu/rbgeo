<%
# Stores cachetypes and counts in a hash
cachehash = Hash.new
Cache.select(:size).distinct.each do |cache|
	cachehash[cache.size] = Cache.where(size: cache.size).length
end
lastindex = 0
# Sorts the hash descending by counts
# Unfortunately, sort_by isn't working as mutable function, so the self reference
cachehash = cachehash.sort_by {|_key, value| value}.reverse.to_h
%>
<h4>Gefundene BehÃ¤lter</h4>
<table class="table table-condensed">
<% cachehash.each_with_index do |(key, value),index|
	lastindex = index %>
	<% if (index == 0) || (index % 4 == 0) %>
	<tr>
	<% end %>
	<td>
	<%= sizeicon(key) %> <%= sizestats(key)[0] %> (<%= sizestats(key)[1] %>%)</td></td>
	<% if (index % 4 == 3) %>
	</tr>
	<% end %>
<% end %>
	<% (4-(lastindex % 4)).times do |dummy| %>
		<td></td>
	<% end %>
	</tr>
</table>