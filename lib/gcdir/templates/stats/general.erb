<%
cachedays = Cache.select(:logdate).distinct.length
dateoffirstcache = Time.at(Cache.first.logdate).to_date
alldays = (Date.parse(Time.now.strftime('%Y/%m/%d')) - dateoffirstcache).to_i
cachedays_percent = ((cachedays.to_f/alldays.to_f)*100).round(2)
foundcount = Cache.where("logtype = ? OR logtype = ? OR logtype = ?", "Found it", "Attended", "Webcam Photo Taken").length
dnfcount = Cache.where(:logtype => "Didn't find it").length
foundspercacheday = (foundcount.to_f/cachedays.to_f).round(2)
foundsperday = (foundcount.to_f/alldays.to_f).round(2)
weeks = alldays/7
months = alldays/30
foundsperweek = (foundcount.to_f/weeks.to_f).round(2)
foundspermonth = (foundcount.to_f/months.to_f).round(2)

midnight = DateTime.new(DateTime.now.year, DateTime.now.month, DateTime.now.day).to_i
lastyear = (midnight - 31556926).to_i
foundsinlastyear = Cache.where("logdate >= ? AND logtype = ?", lastyear, "Found it").length
attendedinlastyear = Cache.where("logdate >= ? AND logtype = ?", lastyear, "Attended").length
webcamsinlastyear  = Cache.where("logdate >= ? AND logtype = ?", lastyear, "Webcam Photo Taken").length
cachesinlastyear = foundsinlastyear + webcamsinlastyear + attendedinlastyear

cachedaysinlastyear = Cache.select(:logdate).where("logdate >= ?", lastyear).distinct.length
foundspercachedayinlastyear = (cachesinlastyear.to_f/cachedaysinlastyear.to_f).round(2)
foundsperdayinlastyear = (cachesinlastyear.to_f/365.to_f).round(2)
foundsperweekinlastyear = (cachesinlastyear.to_f/52.to_f).round(2)
foundspermonthinlastyear  = (cachesinlastyear.to_f/12.to_f).round(2)

# Calculate time periods with most founds
days = Array (dateoffirstcache..Time.now.to_date)
mostfoundperday = 0
maxday = ""
maxweekend = ""
mostfoundperweekend = 0
maxweek = ""
mostfoundperweek = 0
maxmonth = ""
mostfoundpermonth = 0
maxyear = ""
mostfoundperyear = 0
weekends = Array.new
weeks = Array.new

# Day with most caches, split the days in some ranges
days.each_with_index do |day, index|
  # Calculate the weekends
  if day.sunday? && (index-1 > 0)
    thisweekend = [days[index], days[index-1]]
    weekends.push(thisweekend)
  end
  # Calculate the weeks
  if day.sunday? && (index-6 > 0)
    thisweekrange = [days[index].to_time.to_i, days[index-6].to_time.to_i]
    weeks.push(thisweekrange)
  end
  # Calculate the days with the most finds
  foundsinthisday = Cache.where("logdate = ? AND (logtype = ? OR logtype = ? OR logtype = ?)", day.to_time.to_i, "Found it", "Attended", "Webcam Photo Taken").length
  if foundsinthisday > mostfoundperday
    mostfoundperday = foundsinthisday
    maxday = day
  end
end
maxdaystring = maxday.strftime('%d.%m.%Y')

# Calculate the weekend with the most finds
weekends.each do |weekend|
  foundsinthisweekend = Cache.where("(logdate = ? OR logdate = ?) AND (logtype = ? OR logtype = ? OR logtype = ?)", weekend[0].to_time.to_i, weekend[1].to_time.to_i, "Found it", "Attended", "Webcam Photo Taken").length
  if foundsinthisweekend > mostfoundperweekend
    mostfoundperweekend = foundsinthisweekend
    maxweekend = weekend
  end
end
maxweekendstring = maxweekend[1].strftime('%d.%m.%Y')+"/"+maxweekend[0].strftime('%d.%m.%Y')

# Calculate the week with the most finds
weeks.each do |week|
  foundsinthisweek = Cache.where("logdate <= ? AND logdate >= ?  AND (logtype = ? OR logtype = ? OR logtype = ?)", week[0], week[1], "Found it", "Attended", "Webcam Photo Taken").length
  if foundsinthisweek > mostfoundperweek
    mostfoundperweek = foundsinthisweek
    maxweek = week
  end
end
maxweekstring = Time.at(maxweek[1]).strftime('%d.%m.%Y')+"-"+Time.at(maxweek[0]).strftime('%d.%m.%Y')

# Calculate the month with the most finds
months_between(Date.new(dateoffirstcache.year, dateoffirstcache.month), Date.new(Time.now.to_date.year, Time.now.to_date.month)).each do |month|
  startday = month
  endday = month.next_month.prev_day
  foundsinthismonth = Cache.where("logdate <= ? AND logdate >= ?  AND (logtype = ? OR logtype = ? OR logtype = ?)", endday.to_time.to_i, startday.to_time.to_i, "Found it", "Attended", "Webcam Photo Taken").length
  if foundsinthismonth > mostfoundpermonth
    mostfoundpermonth = foundsinthismonth
    maxmonth = month
  end
end
maxmonthstring = maxmonth.strftime('%m.%Y')

# Calculate the year with the most finds
years_between(Date.new(dateoffirstcache.year), Date.new(Time.now.to_date.year)).each do |year|
  startday = year
  endday = year.next_year.prev_day
  foundsinthisyear = Cache.where("logdate <= ? AND logdate >= ?  AND (logtype = ? OR logtype = ? OR logtype = ?)", endday.to_time.to_i, startday.to_time.to_i, "Found it", "Attended", "Webcam Photo Taken").length
  if foundsinthisyear > mostfoundperyear
    mostfoundperyear = foundsinthisyear
    maxyear = year
  end
end
maxyearstring = maxyear.strftime('%Y')

# Calculating longest time period with min 1 find per day and 0 finds per day
longestfindstreak = 0
rangeoflongestfindstreak = Array.new
longesthole = 0
rangeoflongesthole = Array.new
days.each do |day|

  puts "Check #{day.strftime('%d.%m.%Y')}"

  # Specifies some variables for the inner loop
  thisday = day
  thisstreak = 0
  thisstreakrange = Array.new
  thishole = 0
  thisholerange = Array.new

  # Measure the range. Add days to the range until the next day has no caches any more or is outside of the range
  loop do
    thisstreak = thisstreak+1
    thisstreakrange.push(thisday)
    thisday = thisday.next_day
    break if (Cache.where("logdate = ? AND (logtype = ? OR logtype = ? OR logtype = ?)", thisday.to_time.to_i, "Found it", "Attended", "Webcam Photo Taken").length == 0) || (!days.include? thisday)
  end

  # Store the maximum streak range
  if thisstreak > longestfindstreak
    longestfindstreak = thisstreak
    rangeoflongestfindstreak = thisstreakrange
  end

  thisday = day
  loop do
    thishole = thishole+1
    thisholerange.push(thisday)
    thisday = thisday.next_day
    break if (Cache.where("logdate = ? AND (logtype = ? OR logtype = ? OR logtype = ?)", thisday.to_time.to_i, "Found it", "Attended", "Webcam Photo Taken").length > 0) || (!days.include? thisday)
  end

  # Store the maximum hole range
  if thishole > longesthole
    longesthole = thishole
    rangeoflongesthole = thisholerange
  end
end
rangeoflongestfindstreakstring = rangeoflongestfindstreak.first.strftime('%d.%m.%Y')+"-"+rangeoflongestfindstreak.last.strftime('%d.%m.%Y')
rangeoflongestholestring = rangeoflongesthole.first.strftime('%d.%m.%Y')+"-"+rangeoflongesthole.last.strftime('%d.%m.%Y')
%>
<li><%= maxday %></li>
<li>Gesamtzahl aller Funde (ohne Lab-Caches): <strong><%= foundcount %></strong> Finds.</li>
<li>Gesamtzahl aller Nichtfunde: <strong><%= dnfcount %></strong> DNFs.</li>
<li>Gesamtzahl aller Cache-Tage: <strong><%= cachedays %></strong> Tage von <strong><%= alldays %></strong> Gesamttagen (<%= cachedays_percent %>%).</li>
<li>Globaler Durchschnitt: <strong><%= foundspercacheday %></strong> Funde/Cache-Tag, <strong><%= foundsperday %></strong> Funde/Tag, <strong><%= foundsperweek %></strong> Funde/Woche, <strong><%= foundspermonth %></strong> Funde/Monat.</li>
<li>Funde in den letzten 365 Tagen: <strong><%= cachesinlastyear %></strong> Funde.
<li>Cache-Tage in den letzten 365 Tagen: <strong><%= cachedaysinlastyear %></strong> Tage.</li>
<li>Durchschnitt über die letzten 365 Tage: <strong><%= foundspercachedayinlastyear %></strong> Funde/Cache-Tag, <strong><%= foundsperdayinlastyear %></strong> Funde/Tag, <strong><%= foundsperweekinlastyear %></strong> Funde/Woche, <strong><%= foundspermonthinlastyear %></strong> Funde/Monat. </li>
<li>Tag mit den meisten Funden: <%= maxdaystring %> (<strong><%= mostfoundperday %></strong> Funde).</li>
<li>Wochenende mit den meisten Funden: <%= maxweekendstring %> (<strong><%= mostfoundperweekend %></strong> Funde).</li>
<li>Woche mit den meisten Funden: <%= maxweekstring %> (<strong><%= mostfoundperweek %></strong> Funde).</li>
<li>Monat mit den meisten Funden: <%= maxmonthstring %> (<strong><%= mostfoundpermonth %></strong> Funde).</li>
<li>Jahr mit den meisten Funden: <%= maxyearstring %> (<strong><%= mostfoundperyear %></strong> Funde).</li>
<li>Längste Periode mit mindestens 1 Fund/Tag: <%= rangeoflongestfindstreakstring %> (<strong><%= longestfindstreak %></strong> Tage).</li>
<li>Längste Periode ohne Fund: <%= rangeoflongestholestring %> (<strong><%= longesthole %></strong> Tage).</li>
