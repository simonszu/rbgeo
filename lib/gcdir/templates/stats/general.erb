<%
cachedays = Cache.select(:logdate).distinct.length
dateoffirstcache = Time.at(Cache.first.logdate).to_date
alldays = (Date.parse(Time.now.strftime('%Y/%m/%d')) - dateoffirstcache).to_i
cachedays_percent = ((cachedays.to_f/alldays.to_f)*100).round(2)
foundcount = Cache.where("found = 1").length
dnfcount = Cache.where(:logtype => "Didn't find it").length
foundspercacheday = (foundcount.to_f/cachedays.to_f).round(2)
foundsperday = (foundcount.to_f/alldays.to_f).round(2)
weeks = alldays/7
months = alldays/30
foundsperweek = (foundcount.to_f/weeks.to_f).round(2)
foundspermonth = (foundcount.to_f/months.to_f).round(2)

midnight = DateTime.new(DateTime.now.year, DateTime.now.month, DateTime.now.day).to_i
lastyear = (midnight - 31556926).to_i
cachesinlastyear = Cache.where("logdate >= ? AND found = ?", lastyear, 1).length

cachedaysinlastyear = Cache.select(:logdate).where("logdate >= ?", lastyear).distinct.length
foundspercachedayinlastyear = (cachesinlastyear.to_f/cachedaysinlastyear.to_f).round(2)
foundsperdayinlastyear = (cachesinlastyear.to_f/365.to_f).round(2)
foundsperweekinlastyear = (cachesinlastyear.to_f/52.to_f).round(2)
foundspermonthinlastyear  = (cachesinlastyear.to_f/12.to_f).round(2)

# Calculate time periods with most founds
days = Array (dateoffirstcache..Time.now.to_date)
mostfoundperday = 0
maxday = ""
maxweekend = ""
mostfoundperweekend = 0
maxweek = ""
mostfoundperweek = 0
maxmonth = ""
mostfoundpermonth = 0
maxyear = ""
mostfoundperyear = 0
weekends = Array.new
weeks = Array.new

longeststreakarray = Array.new
currentstreakarray = Array.new
longestholearray = Array.new
currentholearray = Array.new

# Day with most caches, split the days in some ranges
days.each_with_index do |day, index|

  # Calculate the weekends
  if day.sunday? && (index-1 > 0)
    thisweekend = [days[index], days[index-1]]
    weekends.push(thisweekend)
  end

  # Calculate the weeks
  if day.sunday? && (index-6 > 0)
    thisweekrange = [days[index].to_time.to_i, days[index-6].to_time.to_i]
    weeks.push(thisweekrange)
  end

  # Calculate the days with the most finds
  foundsinthisday = Cache.where("logdate = ? AND found = ?", day.to_time.to_i, 1).length
  if foundsinthisday > mostfoundperday
    mostfoundperday = foundsinthisday
    maxday = day
  end

  # Calculate longest streaks with min 1 found per day
  # and holes with 0 founds per day
  if has_logs(day)
    currentstreakarray.push(day)
    if currentholearray.length > longestholearray.length
      longestholearray = currentholearray
    end
    currentholearray = []
  else
    currentholearray.push(day)
    if currentstreakarray.length > longeststreakarray.length
      longeststreakarray = currentstreakarray
    end
    currentstreakarray = []
  end
end
maxdaystring = maxday.strftime('%d.%m.%Y')
longeststreakstring = longeststreakarray.first.strftime('%d.%m.%Y')+"-"+longeststreakarray.last.strftime('%d.%m.%Y')
longestholestring = longestholearray.first.strftime('%d.%m.%Y')+"-"+longestholearray.last.strftime('%d.%m.%Y')

# Calculate the weekend with the most finds
weekends.each do |weekend|
  foundsinthisweekend = Cache.where("(logdate = ? OR logdate = ?) AND found = ?", weekend[0].to_time.to_i, weekend[1].to_time.to_i, 1).length
  if foundsinthisweekend > mostfoundperweekend
    mostfoundperweekend = foundsinthisweekend
    maxweekend = weekend
  end
end
maxweekendstring = maxweekend[1].strftime('%d.%m.%Y')+"/"+maxweekend[0].strftime('%d.%m.%Y')

# Calculate the week with the most finds
weeks.each do |week|
  foundsinthisweek = Cache.where("logdate <= ? AND logdate >= ?  AND found = ?", week[0], week[1], 1).length
  if foundsinthisweek > mostfoundperweek
    mostfoundperweek = foundsinthisweek
    maxweek = week
  end
end
maxweekstring = Time.at(maxweek[1]).strftime('%d.%m.%Y')+"-"+Time.at(maxweek[0]).strftime('%d.%m.%Y')

# Calculate the month with the most finds
months_between(Date.new(dateoffirstcache.year, dateoffirstcache.month), Date.new(Time.now.to_date.year, Time.now.to_date.month)).each do |month|
  startday = month
  endday = month.next_month.prev_day
  foundsinthismonth = Cache.where("logdate <= ? AND logdate >= ?  AND found = ?", endday.to_time.to_i, startday.to_time.to_i, 1).length
  if foundsinthismonth > mostfoundpermonth
    mostfoundpermonth = foundsinthismonth
    maxmonth = month
  end
end
maxmonthstring = maxmonth.strftime('%m.%Y')

# Calculate the year with the most finds
years_between(Date.new(dateoffirstcache.year), Date.new(Time.now.to_date.year)).each do |year|
  startday = year
  endday = year.next_year.prev_day
  foundsinthisyear = Cache.where("logdate <= ? AND logdate >= ?  AND found = ?", endday.to_time.to_i, startday.to_time.to_i, 1).length
  if foundsinthisyear > mostfoundperyear
    mostfoundperyear = foundsinthisyear
    maxyear = year
  end
end
maxyearstring = maxyear.strftime('%Y')

# Calculate nearest and farthest cache
home_coords = [simplify_coords(home_lat), simplify_coords(home_lon)]
mindistance = 999999999999999999999
nearest_cachename = ""
nearest_cache_ID = ""
maxdistance = 0
farthest_cachename = ""
farthest_cache_ID = ""
farthest_north = 0
farthest_north_ID = ""
farthest_south = 90
farthest_south_ID = ""
farthest_east = 0
farthest_east_ID = ""
farthest_west = 180
farthest_west_ID = ""
Cache.where("found = ?", 1).each do |cache|
  cache_coords_lat = simplify_coords(cache.coords_lat)
  cache_coords_lon = simplify_coords(cache.coords_lon)
  cache_coords = [simplify_coords(cache.coords_lat), simplify_coords(cache.coords_lon)]
  distance = coord_distance(home_coords, cache_coords)
  if distance < mindistance
    mindistance = distance.round(2)
    nearest_cachename = cache.name
    nearest_cache_ID = cache.gcid
  end
  if distance > maxdistance
    maxdistance = distance.round(2)
    farthest_cachename = cache.name
    farthest_cache_ID = cache.gcid
  end
  if cache_coords_lat > farthest_north
    farthest_north = cache_coords_lat
    farthest_north_ID = cache.gcid
  end
  if cache_coords_lon > farthest_east
    farthest_east = cache_coords_lon
    farthest_east_ID = cache.gcid
  end
  if cache_coords_lat < farthest_south
    farthest_south = cache_coords_lat
    farthest_south_ID = cache.gcid
  end
  if cache_coords_lon < farthest_west
    farthest_west = cache_coords_lon
    farthest_west_ID = cache.gcid
  end
end

farthest_north_name = Cache.where("gcid = ?", farthest_north_ID).first.name
farthest_north_coords = Cache.where("gcid = ?", farthest_north_ID).first.coords_lat
farthest_south_name = Cache.where("gcid = ?", farthest_south_ID).first.name
farthest_south_coords = Cache.where("gcid = ?", farthest_south_ID).first.coords_lat
farthest_east_name = Cache.where("gcid = ?", farthest_east_ID).first.name
farthest_east_coords = Cache.where("gcid = ?", farthest_east_ID).first.coords_lon
farthest_west_name = Cache.where("gcid = ?", farthest_west_ID).first.name
farthest_west_coords = Cache.where("gcid = ?", farthest_west_ID).first.coords_lon

oldest_cache = Cache.where("found = ? AND status = ?", 1, "Available").order(:hiddendate).first
newest_cache = Cache.where("found = ? AND status = ?", 1, "Available").order(:hiddendate).last

%>
<h4>Allgemeine Fundstatistik</h4>
<table class="table table-condensed">
<tr><td>Gesamtzahl aller Funde (ohne Lab-Caches):</td><td><strong><%= foundcount %></strong> Finds.</td></tr>
<tr><td>Gesamtzahl aller Nichtfunde:</td><td><strong><%= dnfcount %></strong> DNFs.</td></tr>
<tr><td>Gesamtzahl aller Cache-Tage:</td><td><strong><%= cachedays %></strong> Tage von <strong><%= alldays %></strong> Gesamttagen (<%= cachedays_percent %>%).</td></tr>
<tr><td>Globaler Durchschnitt:</td><td><strong><%= foundspercacheday %></strong> Funde/Cache-Tag, <strong><%= foundsperday %></strong> Funde/Tag, <strong><%= foundsperweek %></strong> Funde/Woche, <strong><%= foundspermonth %></strong> Funde/Monat.</td></tr>
<tr><td>Funde in den letzten 365 Tagen:</td><td><strong><%= cachesinlastyear %></strong> Funde.</td></tr>
<tr><td>Cache-Tage in den letzten 365 Tagen:</td><td><strong><%= cachedaysinlastyear %></strong> Tage.</td></tr>
<tr><td>Durchschnitt über die letzten 365 Tage:</td><td><strong><%= foundspercachedayinlastyear %></strong> Funde/Cache-Tag, <strong><%= foundsperdayinlastyear %></strong> Funde/Tag, <strong><%= foundsperweekinlastyear %></strong> Funde/Woche, <strong><%= foundspermonthinlastyear %></strong> Funde/Monat.</td></tr>
<tr><td>Tag mit den meisten Funden:</td><td><%= maxdaystring %> (<strong><%= mostfoundperday %></strong> Funde).</td></tr>
<tr><td>Wochenende mit den meisten Funden:</td><td><%= maxweekendstring %> (<strong><%= mostfoundperweekend %></strong> Funde).</td></tr>
<tr><td>Woche mit den meisten Funden:</td><td><%= maxweekstring %> (<strong><%= mostfoundperweek %></strong> Funde).</td></tr>
<tr><td>Monat mit den meisten Funden:</td><td><%= maxmonthstring %> (<strong><%= mostfoundpermonth %></strong> Funde).</td></tr>
<tr><td>Jahr mit den meisten Funden:</td><td><%= maxyearstring %> (<strong><%= mostfoundperyear %></strong> Funde).</td></tr>
<tr><td>Längste Periode mit mindestens 1 Fund/Tag:</td><td><%= longeststreakstring %> (<strong><%= longeststreakarray.length %></strong> Tage).</td></tr>
<tr><td>Längste Periode ohne Fund:</td><td><%= longestholestring %> (<strong><%= longestholearray.length %></strong> Tage).</td></tr>
<tr><td>Am nächsten liegender Cache-Fund:</td><td><a href="details/<%= nearest_cache_ID %>.html"><%= nearest_cachename %></a> (<% if mindistance > 1000 %><strong><%= (mindistance/1000).round(2) %></strong> Kilometer <% else %><strong><%= mindistance %></strong> Meter <% end %>).</td></tr>
<tr><td>Am weitesten entfernter Cache-Fund:</td><td><a href="details/<%= farthest_cache_ID %>.html"><%= farthest_cachename %></a> (<% if maxdistance > 1000 %><strong><%= (maxdistance/1000).round(2) %></strong> Kilometer <% else %><strong><%= maxdistance %></strong> Meter <% end %>).</td></tr>
<tr><td>Nördlichster Cache-Fund:</td><td><a href="details/<%= farthest_north_ID %>.html"><%= farthest_north_name %></a> (<strong><%= farthest_north_coords %></strong>)</td></tr>
<tr><td>Südlichster Cache-Fund:</td><td><a href="details/<%= farthest_south_ID %>.html"><%= farthest_south_name %></a> (<strong><%= farthest_south_coords %></strong>)</td></tr>
<tr><td>Östlichster Cache-Fund:</td><td><a href="details/<%= farthest_east_ID %>.html"><%= farthest_east_name %></a> (<strong><%= farthest_east_coords %></strong>)</td></tr>
<tr><td>Westlichster Cache-Fund:</td><td><a href="details/<%= farthest_west_ID %>.html"><%= farthest_west_name %></a> (<strong><%= farthest_west_coords %></strong>)</td></tr>
<tr><td>Ältester noch aktiver Cache:</td><td><a href="details/<%= oldest_cache.gcid %>.html"><%= oldest_cache.name %></a> (Versteckt am <strong><%= Time.at(oldest_cache.hiddendate).strftime('%d.%m.%Y') %></strong>)</td></tr>
<tr><td>Neuester noch aktiver Cache:</td><td><a href="details/<%= newest_cache.gcid %>.html"><%= newest_cache.name %></a> (Versteckt am <strong><%= Time.at(newest_cache.hiddendate).strftime('%d.%m.%Y') %></strong>)</td></tr>
</table>
