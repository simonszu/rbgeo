<%
# Stores cachetypes and counts in a hash
lastindex = 0
cachehash = Hash.new
Gcache.select(:owner).distinct.each do |cache|
	cachehash[cache.owner] = Cache.where(owner: cache.owner, found: "1").length
end

# Sorts the hash descending by counts
# Unfortunately, sort_by isn't working as mutable function, so the self reference
cachehash = cachehash.sort_by {|_key, value| value}.reverse[0..MAX_OWNERS-1].to_h
%>
<h4>Funde nach Cacheowner (TOP 30)</h4>
<table class="table table-condensed">
<% cachehash.each_with_index do |(key, value),index|
	ownerid = Cache.where(owner: key).first.owner_guid
	lastindex = index %>
	<% if (index == 0) || (index % TABLE_WIDTH == 0) %>
	<tr>
	<% end %>
	<td>
	<a href="http://www.geocaching.com/profile/?guid=<%= ownerid %>"><%= key %></a></td><td><%= ownerstats(key)[0] %> (<%= ownerstats(key)[1] %>%)</td></td>
	<% if (index % TABLE_WIDTH == TABLE_WIDTH-1) %>
	</tr>
	<% end %>
<% end %>
	<% (TABLE_WIDTH-(lastindex % TABLE_WIDTH)).times do |dummy| %>
		<td></td><td></td>
	<% end %>
	</tr>
</table>